<?php
defined('BASEPATH') OR exit('No direct script access allowed');
use Helpers\HubspotClientHelper;
use HubSpot\Client\Crm\Contacts\Model\SimplePublicObject;
use HubSpot\Client\Crm\Contacts\Model\SimplePublicObjectInput;
class HubspotAPI {

    protected $CI;

    const HUBSPOT_API_URL = 'https://api.hubapi.com/';

    /**
     * The API key to use for all events generated by this instance
     *
     * @var string
     */
    protected $apiKey;

    /**
     * The device ID to use for events generated by this instance
     *
     * @var string
     */
    protected $deviceId;

    protected $hubSpot;
  
    public function __construct() {
        $this->CI =& get_instance();
        $this->apiKey = $this->CI->config->item('hubspot_api_key');
        require_once 'application/third_party/hubspot-api/vendor/autoload.php';
        $this->hubSpot = \HubSpot\Factory::createWithApiKey($this->apiKey);
    }

    /* Create the contact */
    public function createContact($userData){
        if($userData['email']){
            $search_email = $this->searchByEmail($userData['email']);
            if($search_email){
                if($search_email->getTotal() == 0){
                    $contactInput = new \HubSpot\Client\Crm\Contacts\Model\SimplePublicObjectInput();
                    $contactInput->setProperties($userData);

                    $contact = $this->hubSpot->crm()->contacts()->basicApi()->create($contactInput);
                    
                    return $contact;
                }else{
                    return null;
                }
            }else{
                return null;
            }
            
        }else{
            return null;
        }
        
    }

    public function searchByEmail($email){
        $filter = new \HubSpot\Client\Crm\Contacts\Model\Filter();
        $filter
            ->setOperator('EQ')
            ->setPropertyName('email')
            ->setValue($email);

        $filterGroup = new \HubSpot\Client\Crm\Contacts\Model\FilterGroup();
        $filterGroup->setFilters([$filter]);

        $searchRequest = new \HubSpot\Client\Crm\Contacts\Model\PublicObjectSearchRequest();
        $searchRequest->setFilterGroups([$filterGroup]);

        // @var CollectionResponseWithTotalSimplePublicObject $contactsPage
        $contactsPage = $this->hubSpot->crm()->contacts()->searchApi()->doSearch($searchRequest);
        return $contactsPage;
    }

    public function createCustomProfile($profile_type, $custom_data){
        if($profile_type && $custom_data){
            $custom_data = array(
                'properties' => $custom_data
            );
            $post_fields = json_encode($custom_data);
            $curl = curl_init();

            curl_setopt_array($curl, array(
            CURLOPT_URL => "https://api.hubapi.com/crm/v3/objects/". $profile_type ."?hapikey=" . $this->apiKey,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => $post_fields,
            CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "content-type: application/json"
            ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
                return false;
            } else {
                return json_decode($response);
            }
        }else{
            return false;
        }
    }

    public function updateCustomProfile($profile_type, $profile_id ,$custom_data){
        if($profile_type && $custom_data){
            $custom_data = array(
                'properties' => $custom_data
            );
            $post_fields = json_encode($custom_data);

            $curl = curl_init();

            curl_setopt_array($curl, array(
            CURLOPT_URL => "https://api.hubapi.com/crm/v3/objects/". $profile_type ."/". $profile_id ."?hapikey=" . $this->apiKey,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "PATCH",
            CURLOPT_POSTFIELDS => $post_fields,
            CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "content-type: application/json"
            ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
                return false;
            } else {
                return json_decode($response);
            }
        }else{
            return false;
        }
    }

    public function associateObjectWithAnother($objectType, $objectId, $toObjectType, $toObjectId, $associationType){

        $curl = curl_init();

        curl_setopt_array($curl, array(
        CURLOPT_URL => "https://api.hubapi.com/crm/v3/objects/$objectType/$objectId/associations/$toObjectType/$toObjectId/$associationType?hapikey=" . $this->apiKey,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => "",
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 30,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => "PUT",
        CURLOPT_HTTPHEADER => array(
            "accept: application/json"
        ),
        ));

        $response = curl_exec($curl);
        $err = curl_error($curl);

        curl_close($curl);

        if ($err) {
            return false;
        } else {
            return  json_decode($response);
        }
    }

    public function getContactIdByEmail($email){
        $filter = new \HubSpot\Client\Crm\Contacts\Model\Filter();
        $filter
            ->setOperator('EQ')
            ->setPropertyName('email')
            ->setValue($email);

        $filterGroup = new \HubSpot\Client\Crm\Contacts\Model\FilterGroup();
        $filterGroup->setFilters([$filter]);

        $searchRequest = new \HubSpot\Client\Crm\Contacts\Model\PublicObjectSearchRequest();
        $searchRequest->setFilterGroups([$filterGroup]);

        // @var CollectionResponseWithTotalSimplePublicObject $contactsPage
        $contactsPage = $this->hubSpot->crm()->contacts()->searchApi()->doSearch($searchRequest);
        $contact_id = "";
        
        if($contactsPage){
            if($contactsPage->getTotal() == 1){
                $contact_data = $contactsPage->getResults(); 
                if($contact_data){
                    $contact_id = $contact_data[0]->getId();
                }
            }
        }

        return $contact_id;
    }

    public function getEventById($event_id){
        $curl = curl_init();
        $searchdata = array(
            'filterGroups' => array(
                'filters' => array(
                    'value' => $event_id,
                    'propertyName' => 'event_id',
                    'operator' => 'EQ',
                ),
                'sorts' => array(
                    'event_id'
                ),
                'properties' => array(
                    'event_id'
                ),
                'limit' => 10,
                'after' => 0
            )
        );
        curl_setopt_array($curl, array(
            CURLOPT_URL => "https://api.hubapi.com/crm/v3/objects/event/search?hapikey=" . $this->apiKey,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => json_encode($searchdata),
            CURLOPT_HTTPHEADER => array(
              "accept: application/json",
              "content-type: application/json"
            ),
          ));

        $response = curl_exec($curl);
        $err = curl_error($curl);

        curl_close($curl);

        if ($err) {
            return false;
        } else {
            $res = json_decode($response);
            if(isset($res->results) && !empty($res->results)){
                return $res->results[0];
            }else{
                return false;
            }
        }
    }

    public function getProfileBySlug($profile_type, $slug = ''){
        if($slug){
            $curl = curl_init();
            $searchdata = array(
                'filterGroups' => array(
                    array(
                        'filters' => array(
                            array(
                                'value' => $slug,
                                'propertyName' => 'url_slug',
                                'operator' => 'EQ'
                            )
                        )
                    ),
                ),
                'sorts' => array(
                    'url_slug'
                ),
                'properties' => array(
                    'url_slug'
                ),
                'limit' => 10,
                'after' => 0
            );
            curl_setopt_array($curl, array(
                CURLOPT_URL => "https://api.hubapi.com/crm/v3/objects/". $profile_type ."/search?hapikey=" . $this->apiKey,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS => json_encode($searchdata),
                CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "content-type: application/json"
                ),
            ));
            //get the profile data by slug in hubspot
            
            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
                return false;
            } else {
                $res = json_decode($response);
                if(isset($res->results) && !empty($res->results)){
                    return $res->results[0];
                }else{
                    return false;
                }
            }
        }else{
            return false;
        }
    }

    public function createEvent($custom_data){
        if($custom_data){
            $custom_data = array(
                'properties' => $custom_data
            );
            $post_fields = json_encode($custom_data);
            $curl = curl_init();

            curl_setopt_array($curl, array(
            CURLOPT_URL => "https://api.hubapi.com/crm/v3/objects/event?hapikey=" . $this->apiKey,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => $post_fields,
            CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "content-type: application/json"
            ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
                return false;
            } else {
                return json_decode($response);
            }
        }else{
            return false;
        }
    }

    public function getBookingByIdentifier($booking_type, $identifier){
        if($identifier){
            $curl = curl_init();
            $searchdata = array(
                'filterGroups' => array(
                    array(
                        'filters' => array(
                            array(
                                'value' => $identifier,
                                'propertyName' => 'booking_unique_identifier',
                                'operator' => 'EQ'
                            )
                        )
                    ),
                ),
                'sorts' => array(
                    'booking_unique_identifier'
                ),
                'properties' => array(
                    'booking_unique_identifier'
                ),
                'limit' => 10,
                'after' => 0
            );
            curl_setopt_array($curl, array(
                CURLOPT_URL => "https://api.hubapi.com/crm/v3/objects/". $booking_type ."/search?hapikey=" . $this->apiKey,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS => json_encode($searchdata),
                CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "content-type: application/json"
                ),
            ));
            //get the profile data by slug in hubspot
            
            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
                return false;
            } else {
                $res = json_decode($response);
                if(isset($res->results) && !empty($res->results)){
                    return $res->results[0];
                }else{
                    return false;
                }
            }
        }else{
            return false;
        }
    }

    public function createBooking($booking_type, $custom_data){
        if($custom_data){
            $custom_data = array(
                'properties' => $custom_data
            );
            $post_fields = json_encode($custom_data);
            $curl = curl_init();

            curl_setopt_array($curl, array(
            CURLOPT_URL => "https://api.hubapi.com/crm/v3/objects/". $booking_type ."?hapikey=" . $this->apiKey,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => $post_fields,
            CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "content-type: application/json"
            ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
                return false;
            } else {
                return json_decode($response);
            }
        }else{
            return false;
        }
    }

}
